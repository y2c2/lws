cmake_minimum_required (VERSION 3.0)
project(libqv)

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    add_definitions("-DUNIX")
    add_definitions("-DLINUX")
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
    add_definitions("-DUNIX")
    add_definitions("-DFREEBSD")
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    add_definitions("-DWINDOWS")
endif()

if (NOT MSVC)
    add_definitions("-Wall")
    add_definitions("-Wextra")
    add_definitions("-g")
endif()

aux_source_directory(src SRCS)
include_directories(src)
if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    aux_source_directory(src/unix SRCS_UNIX)
    set(SRC_LIB ${SRCS} ${SRCS_UNIX})
    include_directories(src/unix)
    aux_source_directory(src/linux SRCS_LINUX)
    set(SRC_LIB ${SRCS} ${SRCS_LINUX})
    include_directories(src/linux)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
    aux_source_directory(src/unix SRCS_UNIX)
    set(SRC_LIB ${SRCS} ${SRCS_UNIX})
    include_directories(src/unix)
    aux_source_directory(src/bsd SRCS_BSD)
    set(SRC_LIB ${SRCS} ${SRCS_BSD})
    include_directories(src/bsd)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    aux_source_directory(src/nt SRCS_WINDOWS)
    set(SRC_LIB ${SRCS} ${SRCS_WINDOWS})
    include_directories(src/nt)
endif()

add_library(qv_static STATIC ${SRC_LIB})
set_target_properties(qv_static PROPERTIES OUTPUT_NAME "qv")
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    target_link_libraries(qv_static wsock32 ws2_32)
endif()

